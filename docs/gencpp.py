#!/usr/bin/env python3
#
# The C++ extension cannot be easily built on RTD, so instead periodically
# the documentation gets automatically generated using this and then it is
# checked into git.
#
# From http://stackoverflow.com/questions/2668187/make-sphinx-generate-rst-class-documentation-from-pydoc
#

import inspect
import os
import re
from os.path import abspath, exists, dirname, join
import shutil

import sphinx.cmd.build
import sphinx.ext.autodoc

root = abspath(dirname(__file__))
gendir = join(root, "..", "_docgen")
if exists(gendir):
    shutil.rmtree(gendir)

os.makedirs(gendir)
shutil.copy(join(root, "conf.py"), gendir)
shutil.copy(join(root, "gensidebar.py"), gendir)

os.chdir(gendir)

import _cscore

fns = []
clss = []

for n in dir(_cscore):
    if n.startswith("_"):
        continue
    o = getattr(_cscore, n)
    if inspect.isclass(o):
        clss.append(n)
    elif inspect.isfunction(o) or inspect.isbuiltin(o):
        fns.append(n)
    else:
        raise ValueError("Unknown thing: %s (%s)" % (n, o))


def _print_heading(heading, file, underline="-"):
    print(heading, file=file)
    print(underline * len(heading), end="\n\n", file=file)


def _writeheader(fp):
    print(".. THIS FILE IS AUTOGENERATED, DO NOT MODIFY\n", file=fp)
    _print_heading("Objects", file=fp, underline="=")


with open(join(gendir, "index.rst"), "w") as fp:
    _writeheader(fp)

    for cls in sorted(clss):
        print(".. autoclass:: cscore.%s" % cls, file=fp)
        print("   :members:", file=fp)
        print("   :undoc-members:", file=fp)
        bases = getattr(_cscore, cls).__bases__
        if (
            bases != (object,)
            and bases[0].__module__ != "pybind11_builtins"
            and not bases[0].__name__.startswith("_")
        ):
            print("   :show-inheritance:", file=fp)
        fp.write("\n")

    for fn in sorted(fns):
        print(".. autofunction:: cscore.%s\n" % fn, file=fp)

rst = []


def add_line(self, line, source, *lineno):
    """Append one line of generated reST to the output."""
    if line:
        line = self.indent + line
    rst.append(line)
    self.directive.result.append(line, source, *lineno)


sphinx.ext.autodoc.Documenter.add_line = add_line

os.environ["GENERATING_CPP"] = "1"
exit_code = sphinx.cmd.build.main(
    [
        "-b",
        "html",
        "-d",
        "_build/doctrees",
        ".",
        "_build/html",
        "index.rst",
    ]
)
if exit_code != 0:
    exit(exit_code)

with open(join(root, "objects.rst"), "w") as fp:
    _writeheader(fp)
    no_funcs_yet = True

    # Format the output a bit..
    for l in rst:
        l = l.replace("_cscore", "cscore")
        l = l.replace(
            "wpi::ArrayRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >",
            "List[str]",
        )
        l = re.sub(r"self: \S+\)", ")", l)
        l = re.sub(r"self: \S+, ", "", l)
        l = re.sub(r"cs::(\S+)::(\S+)", "cscore.\\1.\\2", l)
        l = l.replace("cs::", "cscore.")
        if l.startswith(".. py:class:: "):
            if l.endswith(" -> None"):
                l = l[: -len(" -> None")]
            e = l.find("(")
            if e == -1:
                e = len(l)
            name = l[14:e]
            if "." not in name:
                _print_heading(name, fp)
        elif l.startswith(".. py:function:: ") and no_funcs_yet:
            no_funcs_yet = False
            _print_heading("Utility functions", fp)

        print(l, file=fp)

if exists(gendir):
    shutil.rmtree(gendir)
print("Done.")
