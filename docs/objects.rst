.. THIS FILE IS AUTOGENERATED, DO NOT MODIFY

Objects
=======


AxisCamera
----------

.. py:class:: AxisCamera(*args, **kwargs)
   :module: cscore

   Bases: :class:`cscore.HttpCamera`

   A source that represents an Axis IP camera.
   
   Overloaded function.
   
   1. __init__(name: str, host: str) -> None
   
   Create a source for a MJPEG-over-HTTP (IP) camera.
   
   :param name: Source name (arbitrary unique identifier)
   :param host: Camera host IP or DNS name (e.g. "10.x.x.11")
   :param kind: Camera kind (e.g. kAxis)
   
   2. __init__(name: str, hosts: List[str]) -> None
   
   Create a source for a MJPEG-over-HTTP (IP) camera.
   
   :param name: Source name (arbitrary unique identifier)
   :param hosts: Array of Camera host IPs/DNS names
   :param kind: Camera kind (e.g. kAxis)
   

CvSink
------

.. py:class:: CvSink(*args, **kwargs)
   :module: cscore

   Bases: :class:`cscore.VideoSink`

   A sink for user code to accept video frames as OpenCV images.
   
   Overloaded function.
   
   1. __init__() -> None
   
   2. __init__(name: str) -> None
   
   Create a sink for accepting OpenCV images. :meth:`grabFrame` must be called on the created sink to get each new image
   
   :param name: Source name (arbitrary unique identifier)
   
   
   .. py:method:: CvSink.getError() -> str
      :module: cscore
   
      Get error string.  Call this if :meth:`grabFrame` returns 0 to determine what the error is.
      
   
   .. py:method:: CvSink.grabFrame(image: numpy.ndarray, timeout: float=0.225) -> Tuple[int, numpy.ndarray]
      :module: cscore
   
      Wait for the next frame and get the image. Times out (returning 0) after timeout seconds.
      The provided image will have three 8-bit channels stored in BGR order.
      
      :returns: Frame time, or 0 on error (call :meth:`getError` to obtain the error message), returned image
                The frame time is in 1us increments
      
   
   .. py:method:: CvSink.grabFrameNoTimeout(image: numpy.ndarray) -> Tuple[int, numpy.ndarray]
      :module: cscore
   
      Wait for the next frame and get the image. May block forever.
      The provided image will have three 8-bit channels stored in BGR order.
      
      :returns: Frame time, or 0 on error (call :meth:`getError` to obtain the error message), returned image
                The frame time is in 1us increments
      
   
   .. py:method:: CvSink.setDescription(description: str) -> None
      :module: cscore
   
      Set sink description.
      
      :param description: Description
      
   
   .. py:method:: CvSink.setEnabled(enabled: bool) -> None
      :module: cscore
   
      Enable or disable getting new frames.
      Disabling will cause processFrame (for callback-based CvSinks) to not be called and :meth:`grabFrame` to not return.  This can be used to save processor resources when frames are not needed.
      

CvSource
--------

.. py:class:: CvSource(*args, **kwargs)
   :module: cscore

   Bases: :class:`cscore.VideoSource`

   A source for user code to provide OpenCV images as video frames.
   
   Overloaded function.
   
   1. __init__() -> None
   
   2. __init__(name: str, mode: cscore.VideoMode) -> None
   
   Create an OpenCV source.
   
   :param name: Source name (arbitrary unique identifier)
   :param mode: Video mode being generated
   
   3. __init__(name: str, pixelFormat: cscore.VideoMode.PixelFormat, width: int, height: int, fps: int) -> None
   
   Create an OpenCV source.
   
   :param name: Source name (arbitrary unique identifier)
   :param pixelFormat: Pixel format
   :param width: width
   :param height: height
   :param fps: fps
   
   
   .. py:method:: CvSource.createBooleanProperty(name: str, defaultValue: bool, value: bool) -> cscore.VideoProperty
      :module: cscore
   
      Create a property.
      
      :param name: Property name
      :param defaultValue: Default value
      :param value: Current value
      
      :returns: Property
      
   
   .. py:method:: CvSource.createIntegerProperty(name: str, minimum: int, maximum: int, step: int, defaultValue: int, value: int) -> cscore.VideoProperty
      :module: cscore
   
      Create a property.
      
      :param name: Property name
      :param minimum: Minimum value
      :param maximum: Maximum value
      :param step: Step value
      :param defaultValue: Default value
      :param value: Current value
      
      :returns: Property
      
   
   .. py:method:: CvSource.createProperty(name: str, kind: cscore.VideoProperty.Kind, minimum: int, maximum: int, step: int, defaultValue: int, value: int) -> cscore.VideoProperty
      :module: cscore
   
      Create a property.
      
      :param name: Property name
      :param kind: Property kind
      :param minimum: Minimum value
      :param maximum: Maximum value
      :param step: Step value
      :param defaultValue: Default value
      :param value: Current value
      
      :returns: Property
      
   
   .. py:method:: CvSource.createStringProperty(name: str, value: str) -> cscore.VideoProperty
      :module: cscore
   
      Create a property.
      
      :param name: Property name
      :param value: Current value
      
      :returns: Property
      
   
   .. py:method:: CvSource.notifyError(msg: str) -> None
      :module: cscore
   
      Signal sinks that an error has occurred.  This should be called instead of :meth:`putFrame` when an error occurs.
      
   
   .. py:method:: CvSource.putFrame(image: numpy.ndarray) -> None
      :module: cscore
   
      Put an OpenCV image and notify sinks.
      
      Only 8-bit single-channel or 3-channel (with BGR channel order) images are supported. If the format, depth or channel order is different, use ``cv2.convertTo()`` and/or ``cv2.cvtColor()`` to convert it first.
      
      :param image: OpenCV image
      
   
   .. py:method:: CvSource.setConnected(connected: bool) -> None
      :module: cscore
   
      Set source connection status.  Defaults to true.
      
      :param connected: True for connected, false for disconnected
      
   
   .. py:method:: CvSource.setDescription(description: str) -> None
      :module: cscore
   
      Set source description.
      
      :param description: Description
      
   
   .. py:method:: CvSource.setEnumPropertyChoices(property: cscore.VideoProperty, choices: List[str]) -> None
      :module: cscore
   
      Configure enum property choices.
      
      :param property: Property
      :param choices: Choices
      

HttpCamera
----------

.. py:class:: HttpCamera(*args, **kwargs)
   :module: cscore

   Bases: :class:`cscore.VideoCamera`

   A source that represents a MJPEG-over-HTTP (IP) camera.
   
   Overloaded function.
   
   1. __init__(name: str, url: str, kind: cscore.HttpCamera.HttpCameraKind=HttpCameraKind.kUnknown) -> None
   
   Create a source for a MJPEG-over-HTTP (IP) camera.
   
   :param name: Source name (arbitrary unique identifier)
   :param url: Camera URL (e.g. "http://10.x.y.11/video/stream.mjpg")
   :param kind: Camera kind (e.g. kAxis)
   
   2. __init__(name: str, urls: List[str], kind: cscore.HttpCamera.HttpCameraKind=HttpCameraKind.kUnknown) -> None
   
   Create a source for a MJPEG-over-HTTP (IP) camera.
   
   :param name: Source name (arbitrary unique identifier)
   :param urls: Array of Camera URLs
   :param kind: Camera kind (e.g. kAxis)
   
   
   .. py:class:: HttpCamera.HttpCameraKind(arg0: int) -> None
      :module: cscore
   
      Bases: :class:`pybind11_builtins.pybind11_object`
   
      
      .. py:attribute:: HttpCamera.HttpCameraKind.kAxis
         :module: cscore
         :annotation: = HttpCameraKind.kAxis
      
      
      .. py:attribute:: HttpCamera.HttpCameraKind.kCSCore
         :module: cscore
         :annotation: = HttpCameraKind.kCSCore
      
      
      .. py:attribute:: HttpCamera.HttpCameraKind.kMJPGStreamer
         :module: cscore
         :annotation: = HttpCameraKind.kMJPGStreamer
      
      
      .. py:attribute:: HttpCamera.HttpCameraKind.kUnknown
         :module: cscore
         :annotation: = HttpCameraKind.kUnknown
      
   
   .. py:method:: HttpCamera.getHttpCameraKind() -> cscore.HttpCamera.HttpCameraKind
      :module: cscore
   
      Get the kind of HTTP camera. Autodetection can result in returning a different value than the camera was created with.
      
   
   .. py:method:: HttpCamera.getUrls() -> List[str]
      :module: cscore
   
      Get the URLs used to connect to the camera.
      
   
   .. py:method:: HttpCamera.setUrls(urls: List[str]) -> None
      :module: cscore
   
      Change the URLs used to connect to the camera.
      

MjpegServer
-----------

.. py:class:: MjpegServer(*args, **kwargs)
   :module: cscore

   Bases: :class:`cscore.VideoSink`

   A sink that acts as a MJPEG-over-HTTP network server.
   
   Overloaded function.
   
   1. __init__() -> None
   
   2. __init__(name: str, listenAddress: str, port: int) -> None
   
   Create a MJPEG-over-HTTP server sink.
   
   :param name: Sink name (arbitrary unique identifier)
   :param listenAddress: TCP listen address (empty string for all addresses)
   :param port: TCP port number
   
   3. __init__(name: str, port: int) -> None
   
   Create a MJPEG-over-HTTP server sink.
   
   :param name: Sink name (arbitrary unique identifier)
   :param port: TCP port number
   
   
   .. py:method:: MjpegServer.getListenAddress() -> str
      :module: cscore
   
      Get the listen address of the server.
      
   
   .. py:method:: MjpegServer.getPort() -> int
      :module: cscore
   
      Get the port number of the server.
      
   
   .. py:method:: MjpegServer.setCompression(quality: int) -> None
      :module: cscore
   
      Set the compression for clients that don't specify it.
      
      Setting this will result in increased CPU usage for MJPEG source cameras as it will decompress and recompress the image instead of using the camera's MJPEG image directly.
      
      :param quality: JPEG compression quality (0-100), -1 for unspecified
      
   
   .. py:method:: MjpegServer.setDefaultCompression(quality: int) -> None
      :module: cscore
   
      Set the default compression used for non-MJPEG sources.  If not set, 80 is used.  This function has no effect on MJPEG source cameras; use setCompression() instead to force recompression of MJPEG source images.
      
      :param quality: JPEG compression quality (0-100)
      
   
   .. py:method:: MjpegServer.setFPS(fps: int) -> None
      :module: cscore
   
      Set the stream frames per second (FPS) for clients that don't specify it.
      
      It is not necessary to set this if it is the same as the source FPS.
      
      :param fps: FPS, 0 for unspecified
      
   
   .. py:method:: MjpegServer.setResolution(width: int, height: int) -> None
      :module: cscore
   
      Set the stream resolution for clients that don't specify it.
      
      It is not necessary to set this if it is the same as the source resolution.
      
      Setting this different than the source resolution will result in increased CPU usage, particularly for MJPEG source cameras, as it will decompress, resize, and recompress the image, instead of using the camera's MJPEG image directly.
      
      :param width:  width, 0 for unspecified
      :param height: height, 0 for unspecified
      

RawEvent
--------

.. py:class:: RawEvent
   :module: cscore

   Listener event
   
   
   .. py:class:: RawEvent.Kind(arg0: int) -> None
      :module: cscore
   
      
      .. py:attribute:: RawEvent.Kind.kNetworkInterfacesChanged
         :module: cscore
         :annotation: = Kind.kNetworkInterfacesChanged
      
      
      .. py:attribute:: RawEvent.Kind.kSinkCreated
         :module: cscore
         :annotation: = Kind.kSinkCreated
      
      
      .. py:attribute:: RawEvent.Kind.kSinkDestroyed
         :module: cscore
         :annotation: = Kind.kSinkDestroyed
      
      
      .. py:attribute:: RawEvent.Kind.kSinkDisabled
         :module: cscore
         :annotation: = Kind.kSinkDisabled
      
      
      .. py:attribute:: RawEvent.Kind.kSinkEnabled
         :module: cscore
         :annotation: = Kind.kSinkEnabled
      
      
      .. py:attribute:: RawEvent.Kind.kSinkSourceChanged
         :module: cscore
         :annotation: = Kind.kSinkSourceChanged
      
      
      .. py:attribute:: RawEvent.Kind.kSourceConnected
         :module: cscore
         :annotation: = Kind.kSourceConnected
      
      
      .. py:attribute:: RawEvent.Kind.kSourceCreated
         :module: cscore
         :annotation: = Kind.kSourceCreated
      
      
      .. py:attribute:: RawEvent.Kind.kSourceDestroyed
         :module: cscore
         :annotation: = Kind.kSourceDestroyed
      
      
      .. py:attribute:: RawEvent.Kind.kSourceDisconnected
         :module: cscore
         :annotation: = Kind.kSourceDisconnected
      
      
      .. py:attribute:: RawEvent.Kind.kSourcePropertyChoicesUpdated
         :module: cscore
         :annotation: = Kind.kSourcePropertyChoicesUpdated
      
      
      .. py:attribute:: RawEvent.Kind.kSourcePropertyCreated
         :module: cscore
         :annotation: = Kind.kSourcePropertyCreated
      
      
      .. py:attribute:: RawEvent.Kind.kSourcePropertyValueUpdated
         :module: cscore
         :annotation: = Kind.kSourcePropertyValueUpdated
      
      
      .. py:attribute:: RawEvent.Kind.kSourceVideoModeChanged
         :module: cscore
         :annotation: = Kind.kSourceVideoModeChanged
      
      
      .. py:attribute:: RawEvent.Kind.kSourceVideoModesUpdated
         :module: cscore
         :annotation: = Kind.kSourceVideoModesUpdated
      
   
   .. py:attribute:: RawEvent.kind
      :module: cscore
   
   
   .. py:attribute:: RawEvent.mode
      :module: cscore
   
   
   .. py:attribute:: RawEvent.name
      :module: cscore
   
   
   .. py:attribute:: RawEvent.sinkHandle
      :module: cscore
   
   
   .. py:attribute:: RawEvent.sourceHandle
      :module: cscore
   
   
   .. py:attribute:: RawEvent.value
      :module: cscore
   
   
   .. py:attribute:: RawEvent.valueStr
      :module: cscore
   

UsbCamera
---------

.. py:class:: UsbCamera(*args, **kwargs)
   :module: cscore

   Bases: :class:`cscore.VideoCamera`

   A source that represents a USB camera.
   
   Overloaded function.
   
   1. __init__() -> None
   
   2. __init__(name: str, dev: int) -> None
   
   Create a source for a USB camera based on device number.
   
   :param name: Source name (arbitrary unique identifier)
   :param dev: Device number (e.g. 0 for ``/dev/video0``)
   
   3. __init__(name: str, path: str) -> None
   
   Create a source for a USB camera based on device path.
   
   :param name: Source name (arbitrary unique identifier)
   :param path: Path to device (e.g. ``/dev/video0`` on Linux)
   
   
   .. py:method:: UsbCamera.enumerateUsbCameras() -> List[cscore.UsbCameraInfo]
      :module: cscore
   
      Enumerate USB cameras on the local system.
      
      :returns: list of USB camera information (one for each camera)
      
   
   .. py:method:: UsbCamera.getInfo() -> cscore.UsbCameraInfo
      :module: cscore
   
      Get the full camera information for the device.
      
   
   .. py:method:: UsbCamera.getPath() -> str
      :module: cscore
   
      Get the path to the device.
      
   
   .. py:method:: UsbCamera.setConnectVerbose(level: int) -> None
      :module: cscore
   
      Set how verbose the camera connection messages are.
      
      :param level: 0=don't display Connecting message, 1=do display message
      

UsbCameraInfo
-------------

.. py:class:: UsbCameraInfo
   :module: cscore

   USB camera information
   
   
   .. py:attribute:: UsbCameraInfo.dev
      :module: cscore
   
   
   .. py:attribute:: UsbCameraInfo.name
      :module: cscore
   
   
   .. py:attribute:: UsbCameraInfo.otherPaths
      :module: cscore
   
   
   .. py:attribute:: UsbCameraInfo.path
      :module: cscore
   

VideoCamera
-----------

.. py:class:: VideoCamera() -> None
   :module: cscore

   Bases: :class:`cscore.VideoSource`

   A source that represents a video camera.
   
   
   .. py:class:: VideoCamera.WhiteBalance(arg0: int) -> None
      :module: cscore
   
      Bases: :class:`pybind11_builtins.pybind11_object`
   
      
      .. py:attribute:: VideoCamera.WhiteBalance.kFixedFlourescent2
         :module: cscore
         :annotation: = WhiteBalance.kFixedFlourescent2
      
      
      .. py:attribute:: VideoCamera.WhiteBalance.kFixedFluorescent1
         :module: cscore
         :annotation: = WhiteBalance.kFixedFluorescent1
      
      
      .. py:attribute:: VideoCamera.WhiteBalance.kFixedIndoor
         :module: cscore
         :annotation: = WhiteBalance.kFixedIndoor
      
      
      .. py:attribute:: VideoCamera.WhiteBalance.kFixedOutdoor1
         :module: cscore
         :annotation: = WhiteBalance.kFixedOutdoor1
      
      
      .. py:attribute:: VideoCamera.WhiteBalance.kFixedOutdoor2
         :module: cscore
         :annotation: = WhiteBalance.kFixedOutdoor2
      
   
   .. py:method:: VideoCamera.getBrightness() -> int
      :module: cscore
   
      Get the brightness, as a percentage (0-100).
      
   
   .. py:method:: VideoCamera.setBrightness(brightness: int) -> None
      :module: cscore
   
      Set the brightness, as a percentage (0-100).
      
   
   .. py:method:: VideoCamera.setExposureAuto() -> None
      :module: cscore
   
      Set the exposure to auto aperature.
      
   
   .. py:method:: VideoCamera.setExposureHoldCurrent() -> None
      :module: cscore
   
      Set the exposure to hold current.
      
   
   .. py:method:: VideoCamera.setExposureManual(value: int) -> None
      :module: cscore
   
      Set the exposure to manual, as a percentage (0-100).
      
   
   .. py:method:: VideoCamera.setWhiteBalanceAuto() -> None
      :module: cscore
   
      Set the white balance to auto.
      
   
   .. py:method:: VideoCamera.setWhiteBalanceHoldCurrent() -> None
      :module: cscore
   
      Set the white balance to hold current.
      
   
   .. py:method:: VideoCamera.setWhiteBalanceManual(value: int) -> None
      :module: cscore
   
      Set the white balance to manual, with specified color temperature.
      

VideoEvent
----------

.. py:class:: VideoEvent
   :module: cscore

   Bases: :class:`cscore.RawEvent`

   An event generated by the library and provided to event listeners.
   
   
   .. py:method:: VideoEvent.getProperty() -> cscore.VideoProperty
      :module: cscore
   
   
   .. py:method:: VideoEvent.getSink() -> cscore.VideoSink
      :module: cscore
   
   
   .. py:method:: VideoEvent.getSource() -> cscore.VideoSource
      :module: cscore
   

VideoListener
-------------

.. py:class:: VideoListener(callback: Callable[[cscore.VideoEvent], None], eventMask: int, immediateNotify: bool) -> None
   :module: cscore

   An event listener.  This calls back to a desigated callback function when
   an event matching the specified mask is generated by the library.
   
   Create an event listener.
   
   :param callback: Callback function
   :param eventMask: Bitmask of VideoEvent.Kind values
   :param immediateNotify: Whether callback should be immediately called with a representative set of events for the current library state.
   

VideoMode
---------

.. py:class:: VideoMode(*args, **kwargs)
   :module: cscore

   Bases: :class:`cscore._CS_VideoMode`

   Video mode
   
   Overloaded function.
   
   1. __init__() -> None
   
   2. __init__(pixelFormat: cscore.VideoMode.PixelFormat, width: int, height: int, fps: int) -> None
   
   
   .. py:class:: VideoMode.PixelFormat(arg0: int) -> None
      :module: cscore
   
      Bases: :class:`pybind11_builtins.pybind11_object`
   
      
      .. py:attribute:: VideoMode.PixelFormat.kBGR
         :module: cscore
         :annotation: = PixelFormat.kBGR
      
      
      .. py:attribute:: VideoMode.PixelFormat.kGray
         :module: cscore
         :annotation: = PixelFormat.kGray
      
      
      .. py:attribute:: VideoMode.PixelFormat.kMJPEG
         :module: cscore
         :annotation: = PixelFormat.kMJPEG
      
      
      .. py:attribute:: VideoMode.PixelFormat.kRGB565
         :module: cscore
         :annotation: = PixelFormat.kRGB565
      
      
      .. py:attribute:: VideoMode.PixelFormat.kUnknown
         :module: cscore
         :annotation: = PixelFormat.kUnknown
      
      
      .. py:attribute:: VideoMode.PixelFormat.kYUYV
         :module: cscore
         :annotation: = PixelFormat.kYUYV
      
   
   .. py:attribute:: VideoMode.fps
      :module: cscore
   
   
   .. py:attribute:: VideoMode.height
      :module: cscore
   
   
   .. py:attribute:: VideoMode.pixelFormat
      :module: cscore
   
   
   .. py:attribute:: VideoMode.width
      :module: cscore
   

VideoProperty
-------------

.. py:class:: VideoProperty() -> None
   :module: cscore

   A source or sink property.
   
   
   .. py:class:: VideoProperty.Kind(arg0: int) -> None
      :module: cscore
   
      
      .. py:attribute:: VideoProperty.Kind.kBoolean
         :module: cscore
         :annotation: = Kind.kBoolean
      
      
      .. py:attribute:: VideoProperty.Kind.kEnum
         :module: cscore
         :annotation: = Kind.kEnum
      
      
      .. py:attribute:: VideoProperty.Kind.kInteger
         :module: cscore
         :annotation: = Kind.kInteger
      
      
      .. py:attribute:: VideoProperty.Kind.kNone
         :module: cscore
         :annotation: = Kind.kNone
      
      
      .. py:attribute:: VideoProperty.Kind.kString
         :module: cscore
         :annotation: = Kind.kString
      
   
   .. py:method:: VideoProperty.get() -> int
      :module: cscore
   
   
   .. py:method:: VideoProperty.getChoices() -> List[str]
      :module: cscore
   
   
   .. py:method:: VideoProperty.getDefault() -> int
      :module: cscore
   
   
   .. py:method:: VideoProperty.getKind() -> cscore.VideoProperty.Kind
      :module: cscore
   
   
   .. py:method:: VideoProperty.getLastStatus() -> int
      :module: cscore
   
   
   .. py:method:: VideoProperty.getMax() -> int
      :module: cscore
   
   
   .. py:method:: VideoProperty.getMin() -> int
      :module: cscore
   
   
   .. py:method:: VideoProperty.getName() -> str
      :module: cscore
   
   
   .. py:method:: VideoProperty.getStep() -> int
      :module: cscore
   
   
   .. py:method:: VideoProperty.getString() -> str
      :module: cscore
   
   
   .. py:method:: VideoProperty.isBoolean() -> bool
      :module: cscore
   
   
   .. py:method:: VideoProperty.isEnum() -> bool
      :module: cscore
   
   
   .. py:method:: VideoProperty.isInteger() -> bool
      :module: cscore
   
   
   .. py:method:: VideoProperty.isString() -> bool
      :module: cscore
   
   
   .. py:method:: VideoProperty.set(value: int) -> None
      :module: cscore
   
   
   .. py:method:: VideoProperty.setString(value: str) -> None
      :module: cscore
   

VideoSink
---------

.. py:class:: VideoSink(*args, **kwargs)
   :module: cscore

   A sink for video that accepts a sequence of frames.
   
   Overloaded function.
   
   1. __init__() -> None
   
   2. __init__(sink: cscore.VideoSink) -> None
   
   
   .. py:class:: VideoSink.Kind(arg0: int) -> None
      :module: cscore
   
      
      .. py:attribute:: VideoSink.Kind.kCv
         :module: cscore
         :annotation: = Kind.kCv
      
      
      .. py:attribute:: VideoSink.Kind.kMjpeg
         :module: cscore
         :annotation: = Kind.kMjpeg
      
      
      .. py:attribute:: VideoSink.Kind.kUnknown
         :module: cscore
         :annotation: = Kind.kUnknown
      
   
   .. py:method:: VideoSink.enumerateProperties() -> List[cscore.VideoProperty]
      :module: cscore
   
      Enumerate all properties of this sink
      
   
   .. py:method:: VideoSink.enumerateSinks() -> List[cscore.VideoSink]
      :module: cscore
   
      Enumerate all existing sinks.
      
      :returns: list of sinks.
      
   
   .. py:method:: VideoSink.getConfigJson() -> str
      :module: cscore
   
      Get a JSON configuration string.
      
      :returns: JSON configuration string
      
   
   .. py:method:: VideoSink.getDescription() -> str
      :module: cscore
   
      Get the sink description.  This is sink-kind specific.
      
   
   .. py:method:: VideoSink.getHandle() -> int
      :module: cscore
   
   
   .. py:method:: VideoSink.getKind() -> cscore.VideoSink.Kind
      :module: cscore
   
      Get the kind of the sink.
      
   
   .. py:method:: VideoSink.getLastStatus() -> int
      :module: cscore
   
   
   .. py:method:: VideoSink.getName() -> str
      :module: cscore
   
      Get the name of the sink.  The name is an arbitrary identifier provided when the sink is created, and should be unique.
      
   
   .. py:method:: VideoSink.getProperty(name: str) -> cscore.VideoProperty
      :module: cscore
   
      Get a property.
      
      :param name: Property name
      :returns: Property contents (VideoSource.Kind.kNone if no property with the given name exists)
      
   
   .. py:method:: VideoSink.getSource() -> cscore.VideoSource
      :module: cscore
   
      Get the connected source.
      
      :returns: Connected source (empty if none connected).
      
   
   .. py:method:: VideoSink.getSourceProperty(name: str) -> cscore.VideoProperty
      :module: cscore
   
      Get a property of the associated source.
      
      :param name: Property name
      :returns: Property (VideoSink.Kind.kNone if no property with the given name exists or no source connected)
      
   
   .. py:method:: VideoSink.setConfigJson(config: str) -> bool
      :module: cscore
   
      Set properties from a JSON configuration string.
      
      The format of the JSON input is::
      
          {
            "properties": [
              {
                "name": "property name",
                "value": "property value"
               }
            ]
          }
      
      :param config: configuration
      :returns: True if set successfully
      
   
   .. py:method:: VideoSink.setSource(source: cscore.VideoSource) -> None
      :module: cscore
   
      Configure which source should provide frames to this sink.  Each sink can accept frames from only a single source, but a single source can provide frames to multiple clients.
      
      :param source: Source
      

VideoSource
-----------

.. py:class:: VideoSource(*args, **kwargs)
   :module: cscore

   A source for video that provides a sequence of frames.
   
   Overloaded function.
   
   1. __init__() -> None
   
   2. __init__(source: cscore.VideoSource) -> None
   
   
   .. py:class:: VideoSource.ConnectionStrategy(arg0: int) -> None
      :module: cscore
   
      
      .. py:attribute:: VideoSource.ConnectionStrategy.kAutoManage
         :module: cscore
         :annotation: = ConnectionStrategy.kAutoManage
      
      
      .. py:attribute:: VideoSource.ConnectionStrategy.kForceClose
         :module: cscore
         :annotation: = ConnectionStrategy.kForceClose
      
      
      .. py:attribute:: VideoSource.ConnectionStrategy.kKeepOpen
         :module: cscore
         :annotation: = ConnectionStrategy.kKeepOpen
      
   
   .. py:class:: VideoSource.Kind(arg0: int) -> None
      :module: cscore
   
      
      .. py:attribute:: VideoSource.Kind.kCv
         :module: cscore
         :annotation: = Kind.kCv
      
      
      .. py:attribute:: VideoSource.Kind.kHttp
         :module: cscore
         :annotation: = Kind.kHttp
      
      
      .. py:attribute:: VideoSource.Kind.kUnknown
         :module: cscore
         :annotation: = Kind.kUnknown
      
      
      .. py:attribute:: VideoSource.Kind.kUsb
         :module: cscore
         :annotation: = Kind.kUsb
      
   
   .. py:method:: VideoSource.enumerateProperties() -> List[cscore.VideoProperty]
      :module: cscore
   
      Enumerate all properties of this source
      
   
   .. py:method:: VideoSource.enumerateSinks() -> List[cscore.VideoSink]
      :module: cscore
   
      Enumerate all sinks connected to this source.
      
      :returns: list of sinks.
      
   
   .. py:method:: VideoSource.enumerateSources() -> List[cscore.VideoSource]
      :module: cscore
   
      Enumerate all existing sources.
      
      :returns: list of sources.
      
   
   .. py:method:: VideoSource.enumerateVideoModes() -> List[cscore.VideoMode]
      :module: cscore
   
      Enumerate all known video modes for this source.
      
   
   .. py:method:: VideoSource.getActualDataRate() -> float
      :module: cscore
   
      Get the data rate (in bytes per second).
      
      :func:`.setTelemetryPeriod` must be called for this to be valid.
      
      :returns: Data rate averaged over the telemetry period.
      
   
   .. py:method:: VideoSource.getActualFPS() -> float
      :module: cscore
   
      Get the actual FPS.
      
      :func:`.setTelemetryPeriod` must be called for this to be valid.
      
      :returns: Actual FPS averaged over the telemetry period.
      
   
   .. py:method:: VideoSource.getConfigJson() -> str
      :module: cscore
   
      Get a JSON configuration string.
      
      :returns: JSON string
      
   
   .. py:method:: VideoSource.getDescription() -> str
      :module: cscore
   
      Get the source description.  This is source-kind specific.
      
   
   .. py:method:: VideoSource.getHandle() -> int
      :module: cscore
   
   
   .. py:method:: VideoSource.getKind() -> cscore.VideoSource.Kind
      :module: cscore
   
      Get the kind of the source
      
   
   .. py:method:: VideoSource.getLastFrameTime() -> int
      :module: cscore
   
      Get the last time a frame was captured.
      
   
   .. py:method:: VideoSource.getLastStatus() -> int
      :module: cscore
   
   
   .. py:method:: VideoSource.getName() -> str
      :module: cscore
   
      Get the name of the source. The name is an arbitrary identifier provided when the source is created, and should be unique.
      
   
   .. py:method:: VideoSource.getProperty(name: str) -> cscore.VideoProperty
      :module: cscore
   
      Get a property.
      
      :param name: Property name
      :returns: Property contents (VideoSource.Kind.kNone if no property with the given name exists)
      
   
   .. py:method:: VideoSource.getVideoMode() -> cscore.VideoMode
      :module: cscore
   
      Get the current video mode.
      
   
   .. py:method:: VideoSource.isConnected() -> bool
      :module: cscore
   
      Is the source currently connected to whatever is providing the images?
      
   
   .. py:method:: VideoSource.setConfigJson(config: str) -> bool
      :module: cscore
   
      Set video mode and properties from a JSON configuration string.
      
      :param config: Configuration
      :returns: True if set successfully
      
   
   .. py:method:: VideoSource.setConnectionStrategy(strategy: cscore.VideoSource.ConnectionStrategy) -> None
      :module: cscore
   
      Set the connection strategy.  By default, the source will automatically connect or disconnect based on whether any sinks are connected.
      
      :param strategy: connection strategy (see ConnectionStrategy)
      
   
   .. py:method:: VideoSource.setFPS(fps: int) -> bool
      :module: cscore
   
      Set the frames per second (FPS).
      
      :param fps: desired FPS
      :returns: True if set successfully
      
   
   .. py:method:: VideoSource.setPixelFormat(pixelFormat: cscore.VideoMode.PixelFormat) -> bool
      :module: cscore
   
      Set the pixel format.
      
      :param pixelFormat: desired pixel format
      :returns: True if set successfully
      
   
   .. py:method:: VideoSource.setResolution(width: int, height: int) -> bool
      :module: cscore
   
      Set the resolution.
      
      :param width: desired width
      :param height: desired height
      :returns: True if set successfully
      
   
   .. py:method:: VideoSource.setVideoMode(*args, **kwargs)
      :module: cscore
   
      Overloaded function.
      
      1. setVideoMode(mode: cscore.VideoMode) -> bool
      
      Set the video mode.
      
      :param mode: Video mode
      
      2. setVideoMode(pixelFormat: cscore.VideoMode.PixelFormat, width: int, height: int, fps: int) -> bool
      
      Set the video mode.
      
      :param pixelFormat: desired pixel format
      :param width: desired width
      :param height: desired height
      :param fps: desired FPS
      :returns: True if set successfully
      

Utility functions
-----------------

.. py:function:: getHttpCameraUrls(arg0: int) -> List[str]
   :module: cscore


.. py:function:: getNetworkInterfaces() -> List[str]
   :module: cscore


.. py:function:: getTelemetryElapsedTime() -> float
   :module: cscore


.. py:function:: getUsbCameraPath(arg0: int) -> str
   :module: cscore


.. py:function:: setLogger(func: Callable[[int, str, int, str], None], min_level: int) -> None
   :module: cscore


.. py:function:: setTelemetryPeriod(seconds: float) -> None
   :module: cscore

